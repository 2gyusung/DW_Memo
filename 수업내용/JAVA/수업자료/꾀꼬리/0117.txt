*메소드 수업
    1 . 메소드(함수, 기능)
    각 기능을 분리해서 개발 해야 소프트웨어 품질 향상
    ex) 로봇 팔 , 다리  (응집도 높고 결합도는 낮아야 좋은 소프트웨어)

 2. main : 자바에서 먼저 실행 되는 기능(함수)
    *static 이 붙은 함수에는 static 함수 만 가능.
    // public : 접근 지정자 
                객체지향 언어는 대부분 평균 4개 접근 지정자 가능
                (*public, *private, protected, 디폴트 접근 지정자)


4. 문법
*함수이름은 동사으로 할것.
인자값에는 최대 3개까지만 오자.
용어 공통 : 1. 인자값 2. 파라미터는 동일한 언어라고 생각하자.

<접근지정자>   <리턴 타입>    <인자 값>          <함수(메소드

) 이름>    <인자 값>
public      int  (동작)getSum(int x, int y)   {
                    int sum = 10;
                // 리턴 타입이 int형이면
                // int형 데이터를 반환(return) 해야 함.
                    return sum;

}

** if로만 return을 하면 무조건 return을 마지막 줄에 한번 더 입력 해야함. 
    (컴퓨터는 그 조건이 틀렸을지 모른다고 가정함.)
** if else로 하면 둘줄 하나는 무조건 실행하기 때문에
    return을 마지막 줄에 입력 안함.

1 리턴타입 : 
메소드의 최종 결과값을 반환.
리턴 타임에는 데이터 타입(int,double,float,long...) 8개와 클래스 타입(String) 1개 총 9개.
리턴 타입이 없을때는 void 로 표현.
2 파리미터(인자값) 
데이터 타입(int,double,float,long...) 8개와 클래스 타입(String) 1개
총 9개.
인자값이 없을 때는 () 빈 괄호
***인자값(파라미터 값)은 3개 이하로 작성.
3 접근지정자
public : 다른 클래스에서 호출 가능
private : 내부 클래스에서만 호출 가능(비법소스라고 생각 하면 됨(숨김))
protected : int float double String
default :

클래스 ? (133p)
    (객체 지향 언어 )
    객체란 고유한 특성을 가짐.
    객체들이 모여서 하나의 프로그램이 탄생.
    ex) 마우스 키보드 모니터(고유한 특성)

    객체 지향 언어 특징 (면접 문제)
        1. 캡슐화 : 내부를 마치 캡슐처럼 보호 
        2. 상속 :   클래스를 부모와 자식으로 두고 부모의 기능 물려받음
        3. 다형성 : 같은 이름의 메소드가 다르게 구현
                    (메소드, *오버로딩, *오버라이딩)


    public class 해당 클래스 파일에 한번만!
    메소드에 접근지정자를 private를 선언하면 
    외부 클래스에서 호출 시 해당 메소드를 호출할 수 없다.

    package 메소드2;

public class 문자메소드 {

	public static void main(String[] args) {
		String name = "ABCD";
		String 소문자 = "abcd";
		//대문자 > 소문자 변환
		String result = name.toLowerCase();//인자값이 없는 메소드
		System.out.println(result);
		// 소문자 > 대문자 
		result =  소문자.toUpperCase();
		System.out.println(result);
		
		String id = " 홍길동";
		result = id.trim();
		System.out.println(result);
		//*****
		
		String phone = "010-1234-7890";
		String array[] = phone.split("-");
				System.out.println(array[1]);
		
		
		//**
		String 닉네임 = "지존지존지존지지";		
		int len = 닉네임.length();
		System.out.println(len);
		if(len > 4) {
			System.out.println("닉네임은 4글자 이하로만 작성 가능합니다.");
					
		
		}
		String password = "123@";//대상 //바꾸고 싶은것
		result = password.replace("@","" );
		System.out.println(result);
		
		//*****
		
		String password2 = "123 123 123";
		result = password.replace(" "," " );
		System.out.println(result);
	}

}

	}
